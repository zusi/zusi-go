// Code generated by zusi-tcpgen. DO NOT EDIT.

package tcp

import (
	"errors"
	"fmt"
	"github.com/zusi/zusi-go/tcp/message"
	"github.com/zusi/zusi-go/tcp/message/fahrpult"
	"io"
)

func readMessageAckHelloMessage(reader io.Reader) (*message.AckHelloMessage, error) {
	msg := message.AckHelloMessage{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.ZusiVersion, err = ReadString(reader, length)
		case 0x0002:
			msg.ZusiVerbindungsinfo, err = ReadString(reader, length)
		case 0x0003:
			msg.ErrorCode, err = ReadUint8(reader, length)
		case 0x0004:
			msg.FahrplanStartZeit, err = ReadFloat64(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readMessageHelloMessage(reader io.Reader) (*message.HelloMessage, error) {
	msg := message.HelloMessage{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.ProtokollVersion, err = ReadUint16(reader, length)
		case 0x0002:
			msg.ClientTyp, err = ReadUint16(reader, length)
		case 0x0003:
			msg.Name, err = ReadString(reader, length)
		case 0x0004:
			msg.Version, err = ReadString(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readMessageMessage(reader io.Reader) (*message.Message, error) {
	msg := message.Message{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Verbindungsaufbau, err = readMessageVerbindungsaufbauMessage(reader)
		case 0x0002:
			msg.Fahrpult, err = readFahrpultFahrpultMessage(reader)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readMessageVerbindungsaufbauMessage(reader io.Reader) (*message.VerbindungsaufbauMessage, error) {
	msg := message.VerbindungsaufbauMessage{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Hello, err = readMessageHelloMessage(reader)
		case 0x0002:
			msg.AckHello, err = readMessageAckHelloMessage(reader)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultAckNeededData(reader io.Reader) (*fahrpult.AckNeededData, error) {
	msg := fahrpult.AckNeededData{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.ErrorCode, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultControl(reader io.Reader) (*fahrpult.Control, error) {
	msg := fahrpult.Control{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Pause, err = readFahrpultShortNode(reader)
		case 0x0002:
			msg.Restart, err = readFahrpultControlFilename(reader)
		case 0x0003:
			msg.Start, err = readFahrpultControlFilename(reader)
		case 0x0004:
			msg.Ende, err = readFahrpultEmptyNode(reader)
		case 0x0005:
			msg.FplNeustart, err = readFahrpultEmptyNode(reader)
		case 0x0006:
			msg.ZugAuswaehlen, err = readFahrpultTrain(reader)
		case 0x0007:
			msg.Zeitsprung, err = readFahrpultShortNode(reader)
		case 0x0008:
			msg.Zeitraffer, err = readFahrpultShortNode(reader)
		case 0x0009:
			msg.Nebel, err = readFahrpultSingleNode(reader)
		case 0x000A:
			msg.Helligkeit, err = readFahrpultSingleNode(reader)
		case 0x000B:
			msg.Reibwert, err = readFahrpultSingleNode(reader)
		case 0x000C:
			msg.Autopilot, err = readFahrpultShortNode(reader)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultControlFilename(reader io.Reader) (*fahrpult.ControlFilename, error) {
	msg := fahrpult.ControlFilename{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Dateiname, err = ReadString(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultDataFtd(reader io.Reader) (*fahrpult.DataFtd, error) {
	msg := fahrpult.DataFtd{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Geschwindigkeit, err = ReadFloat32(reader, length)
		case 0x0002:
			msg.DruckHauptluftleitung, err = ReadFloat32(reader, length)
		case 0x0003:
			msg.DruckBremszylinder, err = ReadFloat32(reader, length)
		case 0x0004:
			msg.DruckHauptluftbehaelter, err = ReadFloat32(reader, length)
		case 0x0005:
			msg.LuftpresserLaeuft, err = ReadFloat32(reader, length)
		case 0x0006:
			msg.LuftstromFvb, err = ReadFloat32(reader, length)
		case 0x0007:
			msg.LuftstromZbv, err = ReadFloat32(reader, length)
		case 0x0008:
			msg.LuefterAn, err = ReadFloat32(reader, length)
		case 0x0009:
			msg.ZugkraftGesamt, err = ReadFloat32(reader, length)
		case 0x000A:
			msg.ZugkraftProAchse, err = ReadFloat32(reader, length)
		case 0x000B:
			msg.ZugkraftSollGesamt, err = ReadFloat32(reader, length)
		case 0x000C:
			msg.ZugkraftSollProAchse, err = ReadFloat32(reader, length)
		case 0x000D:
			msg.Oberstrom, err = ReadFloat32(reader, length)
		case 0x000E:
			msg.Fahrleitungsspannung, err = ReadFloat32(reader, length)
		case 0x000F:
			msg.Motordrehzahl, err = ReadFloat32(reader, length)
		case 0x0010:
			msg.UhrzeitStunde, err = ReadFloat32(reader, length)
		case 0x0011:
			msg.UhrzeitMinute, err = ReadFloat32(reader, length)
		case 0x0012:
			msg.UhrzeitSekunde, err = ReadFloat32(reader, length)
		case 0x0013:
			msg.Hauptschalter, err = ReadFloat32(reader, length)
		case 0x0014:
			msg.Trennschuetz, err = ReadFloat32(reader, length)
		case 0x0015:
			msg.Fahrstufe, err = ReadFloat32(reader, length)
		case 0x0017:
			msg.AfbSollgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x0018:
			msg.DruckHilfsluftbehaelter, err = ReadFloat32(reader, length)
		case 0x0019:
			msg.ZurueckgelegterGesamtweg, err = ReadFloat32(reader, length)
		case 0x001A:
			msg.LmGetriebe, err = ReadFloat32(reader, length)
		case 0x001B:
			msg.LmSchleudern, err = ReadFloat32(reader, length)
		case 0x001C:
			msg.LmGleiten, err = ReadFloat32(reader, length)
		case 0x001D:
			msg.LmMgBremse, err = ReadFloat32(reader, length)
		case 0x001E:
			msg.LmHBremse, err = ReadFloat32(reader, length)
		case 0x001F:
			msg.LmRBremse, err = ReadFloat32(reader, length)
		case 0x0020:
			msg.LmHochabbremsung, err = ReadFloat32(reader, length)
		case 0x0021:
			msg.LmSchnellbremsung, err = ReadFloat32(reader, length)
		case 0x0022:
			msg.StatusNotbremssystem, err = readFahrpultStatusNotbremssystem(reader)
		case 0x0023:
			msg.LmUhrzeitDigital, err = ReadFloat32(reader, length)
		case 0x0024:
			msg.LmDrehzahlverstellung, err = ReadFloat32(reader, length)
		case 0x0025:
			msg.LmFahrtrichtungVor, err = ReadFloat32(reader, length)
		case 0x0026:
			msg.LmFahrtrichtungZurueck, err = ReadFloat32(reader, length)
		case 0x0027:
			msg.LmFahrtrichtungM, err = ReadFloat32(reader, length)
		case 0x0029:
			msg.Motordrehmoment, err = ReadFloat32(reader, length)
		case 0x002A:
			msg.MotorlastNormiert, err = ReadFloat32(reader, length)
		case 0x002B:
			msg.Tunnel, err = ReadFloat32(reader, length)
		case 0x002C:
			msg.SchienenstossWeiche, err = ReadFloat32(reader, length)
		case 0x002D:
			msg.Stahlbruecke, err = ReadFloat32(reader, length)
		case 0x002E:
			msg.Steinbruecke, err = ReadFloat32(reader, length)
		case 0x002F:
			msg.XKoordinate, err = ReadFloat32(reader, length)
		case 0x0030:
			msg.YKoordinate, err = ReadFloat32(reader, length)
		case 0x0031:
			msg.ZKoordinate, err = ReadFloat32(reader, length)
		case 0x0032:
			msg.UTMReferenzpunktXkm, err = ReadFloat32(reader, length)
		case 0x0033:
			msg.UTMReferenzpunktYkm, err = ReadFloat32(reader, length)
		case 0x0034:
			msg.UTMZone, err = ReadFloat32(reader, length)
		case 0x0035:
			msg.UTMZone2, err = ReadFloat32(reader, length)
		case 0x0036:
			msg.AFBAn, err = ReadFloat32(reader, length)
		case 0x0037:
			msg.Individuell01, err = ReadFloat32(reader, length)
		case 0x0038:
			msg.Individuell02, err = ReadFloat32(reader, length)
		case 0x0039:
			msg.Individuell03, err = ReadFloat32(reader, length)
		case 0x003A:
			msg.Individuell04, err = ReadFloat32(reader, length)
		case 0x003B:
			msg.Individuell05, err = ReadFloat32(reader, length)
		case 0x003C:
			msg.Individuell06, err = ReadFloat32(reader, length)
		case 0x003D:
			msg.Individuell07, err = ReadFloat32(reader, length)
		case 0x003E:
			msg.Individuell08, err = ReadFloat32(reader, length)
		case 0x003F:
			msg.Individuell09, err = ReadFloat32(reader, length)
		case 0x0040:
			msg.Individuell10, err = ReadFloat32(reader, length)
		case 0x0041:
			msg.Individuell11, err = ReadFloat32(reader, length)
		case 0x0042:
			msg.Individuell12, err = ReadFloat32(reader, length)
		case 0x0043:
			msg.Individuell13, err = ReadFloat32(reader, length)
		case 0x0044:
			msg.Individuell14, err = ReadFloat32(reader, length)
		case 0x0045:
			msg.Individuell15, err = ReadFloat32(reader, length)
		case 0x0046:
			msg.Individuell16, err = ReadFloat32(reader, length)
		case 0x0047:
			msg.Individuell17, err = ReadFloat32(reader, length)
		case 0x0048:
			msg.Individuell18, err = ReadFloat32(reader, length)
		case 0x0049:
			msg.Individuell19, err = ReadFloat32(reader, length)
		case 0x004A:
			msg.Individuell20, err = ReadFloat32(reader, length)
		case 0x004B:
			msg.Datum, err = ReadFloat32(reader, length)
		case 0x004C:
			msg.Gleiskruemmung, err = ReadFloat32(reader, length)
		case 0x004D:
			msg.Streckenhoechstgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x004E:
			msg.ZugkraftvorschlagAutopilot, err = ReadFloat32(reader, length)
		case 0x004F:
			msg.BeschleunigungX, err = ReadFloat32(reader, length)
		case 0x0050:
			msg.BeschleunigungY, err = ReadFloat32(reader, length)
		case 0x0051:
			msg.BeschleunigungZ, err = ReadFloat32(reader, length)
		case 0x0052:
			msg.DrehbeschleunigungXAchse, err = ReadFloat32(reader, length)
		case 0x0053:
			msg.DrehbeschleunigungYAchse, err = ReadFloat32(reader, length)
		case 0x0054:
			msg.DrehbeschleunigungZAchse, err = ReadFloat32(reader, length)
		case 0x0055:
			msg.Stromabnehmer, err = ReadFloat32(reader, length)
		case 0x0056:
			msg.LmFederspeicherbremse, err = ReadFloat32(reader, length)
		case 0x0057:
			msg.ZustandFederspeicherbremse, err = ReadFloat32(reader, length)
		case 0x0058:
			msg.SteuerwagenLmGetriebe, err = ReadFloat32(reader, length)
		case 0x0059:
			msg.SteuerwagenLmSchleudern, err = ReadFloat32(reader, length)
		case 0x005A:
			msg.SteuerwagenLmGleiten, err = ReadFloat32(reader, length)
		case 0x005B:
			msg.SteuerwagenLmHBremse, err = ReadFloat32(reader, length)
		case 0x005C:
			msg.SteuerwagenLmRBremse, err = ReadFloat32(reader, length)
		case 0x005D:
			msg.SteuerwagenLmDrehzahlverstellung, err = ReadFloat32(reader, length)
		case 0x005E:
			msg.DruckZweitbehaelter, err = ReadFloat32(reader, length)
		case 0x005F:
			msg.GeschwindigkeitAbsolut, err = ReadFloat32(reader, length)
		case 0x0060:
			msg.ZugIstEntgleist, err = ReadFloat32(reader, length)
		case 0x0061:
			msg.KilometrierungZugspitze, err = ReadFloat32(reader, length)
		case 0x0062:
			msg.Motorstrom, err = ReadFloat32(reader, length)
		case 0x0063:
			msg.Motorspannung, err = ReadFloat32(reader, length)
		case 0x0064:
			msg.StatusSifa, err = readFahrpultStatusSifa(reader)
		case 0x0065:
			msg.StatusZugsicherung, err = readFahrpultStatusZugbeeinflussung(reader)
		case 0x0066:
			msg.StatusTuersystem, err = readFahrpultStatusTuersystem(reader)
		case 0x0067:
			msg.Individuell21, err = ReadFloat32(reader, length)
		case 0x0068:
			msg.Individuell22, err = ReadFloat32(reader, length)
		case 0x0069:
			msg.Individuell23, err = ReadFloat32(reader, length)
		case 0x006A:
			msg.Individuell24, err = ReadFloat32(reader, length)
		case 0x006B:
			msg.Individuell25, err = ReadFloat32(reader, length)
		case 0x006C:
			msg.Individuell26, err = ReadFloat32(reader, length)
		case 0x006D:
			msg.Individuell27, err = ReadFloat32(reader, length)
		case 0x006E:
			msg.Individuell28, err = ReadFloat32(reader, length)
		case 0x006F:
			msg.Individuell29, err = ReadFloat32(reader, length)
		case 0x0070:
			msg.Individuell30, err = ReadFloat32(reader, length)
		case 0x0071:
			msg.Individuell31, err = ReadFloat32(reader, length)
		case 0x0072:
			msg.Individuell32, err = ReadFloat32(reader, length)
		case 0x0073:
			msg.Individuell33, err = ReadFloat32(reader, length)
		case 0x0074:
			msg.Individuell34, err = ReadFloat32(reader, length)
		case 0x0075:
			msg.Individuell35, err = ReadFloat32(reader, length)
		case 0x0076:
			msg.Individuell36, err = ReadFloat32(reader, length)
		case 0x0077:
			msg.Individuell37, err = ReadFloat32(reader, length)
		case 0x0078:
			msg.Individuell38, err = ReadFloat32(reader, length)
		case 0x0079:
			msg.Individuell39, err = ReadFloat32(reader, length)
		case 0x007A:
			msg.Individuell40, err = ReadFloat32(reader, length)
		case 0x007B:
			msg.SteuerwagenLuefterAn, err = ReadFloat32(reader, length)
		case 0x007C:
			msg.SteuerwagenZugkraftGesamt, err = ReadFloat32(reader, length)
		case 0x007D:
			msg.SteuerwagenZugraftProAchse, err = ReadFloat32(reader, length)
		case 0x007E:
			msg.SteuerwagenZugkraftSollGesamt, err = ReadFloat32(reader, length)
		case 0x007F:
			msg.SteuerwagenZugraftSollProAchse, err = ReadFloat32(reader, length)
		case 0x0080:
			msg.SteuerwagenOberstrom, err = ReadFloat32(reader, length)
		case 0x0081:
			msg.SteuerwagenFahrleitungsspannung, err = ReadFloat32(reader, length)
		case 0x0082:
			msg.SteuerwagenMotordrehzahl, err = ReadFloat32(reader, length)
		case 0x0083:
			msg.SteuerwagenHauptschalter, err = ReadFloat32(reader, length)
		case 0x0084:
			msg.SteuerwagenTrennschuetz, err = ReadFloat32(reader, length)
		case 0x0085:
			msg.SteuerwagenFahrstufe, err = ReadFloat32(reader, length)
		case 0x0086:
			msg.SteuerwagenMotordrehmoment, err = ReadFloat32(reader, length)
		case 0x0087:
			msg.SteuerwagenMotorlastNormiert, err = ReadFloat32(reader, length)
		case 0x0088:
			msg.SteuerwagenStromabnehmer, err = ReadFloat32(reader, length)
		case 0x0089:
			msg.SteuerwagenMotorstrom, err = ReadFloat32(reader, length)
		case 0x008A:
			msg.SteuerwagenMotorspannung, err = ReadFloat32(reader, length)
		case 0x008B:
			msg.GeschwindigkeitAbsolutInklSchleudern, err = ReadFloat32(reader, length)
		case 0x008C:
			msg.BatteriehauptschalterAus, err = ReadFloat32(reader, length)
		case 0x008D:
			msg.StatusFahrzeug, err = readFahrpultStatusFahrzeug(reader)
		case 0x008E:
			msg.StatusZugverband, err = readFahrpultStatusZugverband(reader)
		case 0x008F:
			msg.Bremsprobenfunktion, err = ReadFloat32(reader, length)
		case 0x0090:
			msg.ZugUndBremsGesamtkraftSollNormiert, err = ReadFloat32(reader, length)
		case 0x0091:
			msg.SteuerwagenZugUndBremsGesamtkraftSollNormiert, err = ReadFloat32(reader, length)
		case 0x0092:
			msg.StatusWeichen, err = readFahrpultStatusWeichen(reader)
		case 0x0093:
			msg.ZugUndBremsGesamtkraftAbsolutNormiert, err = ReadFloat32(reader, length)
		case 0x0094:
			msg.SteuerwagenZugUndBremsGesamtkraftAbsolutNormiert, err = ReadFloat32(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultDataProg(reader io.Reader) (*fahrpult.DataProg, error) {
	msg := fahrpult.DataProg{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Zugdatei, err = ReadString(reader, length)
		case 0x0002:
			msg.Zugnummer, err = ReadString(reader, length)
		case 0x0003:
			msg.Ladepause, err = ReadUint8(reader, length)
		case 0x0004:
			msg.Buchfahrplandatei, err = ReadString(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEfzZugbeeinflussungssystem(reader io.Reader) (*fahrpult.EfzZugbeeinflussungssystem, error) {
	msg := fahrpult.EfzZugbeeinflussungssystem{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Bezeichnung, err = ReadString(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEinzelfahrzeug(reader io.Reader) (*fahrpult.Einzelfahrzeug, error) {
	msg := fahrpult.Einzelfahrzeug{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Dateiname, err = ReadString(reader, length)
		case 0x0002:
			msg.Beschreibung, err = ReadString(reader, length)
		case 0x0003:
			msg.Bremsstellung, err = ReadUint16(reader, length)
		case 0x0004:
			v, er := readFahrpultEfzZugbeeinflussungssystem(reader)
			msg.Zugbeeinflussungssystem = append(msg.Zugbeeinflussungssystem, *v)
			err = er
		case 0x0005:
			msg.Vmax, err = ReadFloat32(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEmptyNode(reader io.Reader) (*fahrpult.EmptyNode, error) {
	msg := fahrpult.EmptyNode{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsBetriebsdaten(reader io.Reader) (*fahrpult.EtcsBetriebsdaten, error) {
	msg := fahrpult.EtcsBetriebsdaten{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.AktivesLevel, err = ReadUint16(reader, length)
		case 0x0002:
			msg.AktiverModus, err = ReadUint16(reader, length)
		case 0x0003:
			msg.BremsungsGrund, err = ReadUint16(reader, length)
		case 0x0004:
			msg.BremsungsGrundString, err = ReadString(reader, length)
		case 0x0005:
			msg.StmInfo, err = readFahrpultEtcsStmInfo(reader)
		case 0x0006:
			msg.LevelAnkuendigung, err = readFahrpultEtcsLevelAnkuendigung(reader)
		case 0x0007:
			msg.ModusAnkuendigung, err = readFahrpultEtcsModusAnkuendigung(reader)
		case 0x0008:
			msg.Funkstatus, err = readFahrpultEtcsFunkstatus(reader)
		case 0x0009:
			msg.Zielgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x000A:
			msg.Zielweg, err = ReadFloat32(reader, length)
		case 0x000B:
			msg.AbstandBremseinsatzpunkt, err = ReadFloat32(reader, length)
		case 0x000C:
			msg.Entlassungsgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x000D:
			msg.Sollgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x000E:
			msg.Warngeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x000F:
			msg.Bremsgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x0010:
			msg.Zwangsbremsgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x0011:
			msg.BremskurveLaeuft, err = ReadUint8(reader, length)
		case 0x0012:
			v, er := readFahrpultEtcsVorschaupunkt(reader)
			msg.Vorschaupunkte = append(msg.Vorschaupunkte, *v)
			err = er
		case 0x0013:
			msg.OverrideAktiv, err = ReadUint8(reader, length)
		case 0x0014:
			msg.NotrufStatus, err = ReadUint8(reader, length)
		case 0x0015:
			msg.Betriebszwangsbremsung, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsEinstellungen(reader io.Reader) (*fahrpult.EtcsEinstellungen, error) {
	msg := fahrpult.EtcsEinstellungen{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Zustand, err = ReadUint8(reader, length)
		case 0x0002:
			v, er := readFahrpultEtcsStm(reader)
			msg.Stm = append(msg.Stm, *v)
			err = er
		case 0x0003:
			msg.Zugdaten, err = readFahrpultEtcsZugdaten(reader)
		case 0x0004:
			msg.Spec, err = readFahrpultEtcsSpec(reader)
		case 0x0005:
			msg.EtcsStoerschalter, err = ReadUint8(reader, length)
		case 0x0006:
			msg.EtcsHauptschalter, err = ReadUint8(reader, length)
		case 0x0007:
			msg.Luftabsperrhahn, err = ReadUint8(reader, length)
		case 0x0008:
			msg.EtcsQuittierschalter, err = ReadUint8(reader, length)
		case 0x0009:
			msg.OverrideAnforderung, err = ReadUint8(reader, length)
		case 0x000A:
			msg.Start, err = ReadUint8(reader, length)
		case 0x000B:
			msg.LevelEinstellenAnfordern, err = ReadUint8(reader, length)
		case 0x000C:
			msg.StmSelectedIndex, err = ReadUint16(reader, length)
		case 0x000D:
			msg.ModusEinstellenAnfordern, err = ReadUint16(reader, length)
		case 0x000E:
			msg.TafModus, err = ReadUint8(reader, length)
		case 0x000F:
			msg.Zugneustart, err = ReadUint8(reader, length)
		case 0x0010:
			msg.InfoTonAbspielen, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsFunkstatus(reader io.Reader) (*fahrpult.EtcsFunkstatus, error) {
	msg := fahrpult.EtcsFunkstatus{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Zustand, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsLevelAnkuendigung(reader io.Reader) (*fahrpult.EtcsLevelAnkuendigung, error) {
	msg := fahrpult.EtcsLevelAnkuendigung{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.NeuesLevel, err = ReadUint16(reader, length)
		case 0x0002:
			msg.Quittierung, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsModusAnkuendigung(reader io.Reader) (*fahrpult.EtcsModusAnkuendigung, error) {
	msg := fahrpult.EtcsModusAnkuendigung{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.NeuerModus, err = ReadUint16(reader, length)
		case 0x0002:
			msg.Quittierung, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsSpec(reader io.Reader) (*fahrpult.EtcsSpec, error) {
	msg := fahrpult.EtcsSpec{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Reibwert, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsStm(reader io.Reader) (*fahrpult.EtcsStm, error) {
	msg := fahrpult.EtcsStm{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.StmIndex, err = ReadUint16(reader, length)
		case 0x0002:
			msg.StmName, err = ReadString(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsStmInfo(reader io.Reader) (*fahrpult.EtcsStmInfo, error) {
	msg := fahrpult.EtcsStmInfo{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.StmIndex, err = ReadUint16(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsVorschaupunkt(reader io.Reader) (*fahrpult.EtcsVorschaupunkt, error) {
	msg := fahrpult.EtcsVorschaupunkt{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Herkunft, err = ReadUint16(reader, length)
		case 0x0002:
			msg.Geschwindigkeit, err = ReadFloat32(reader, length)
		case 0x0003:
			msg.Abstand, err = ReadFloat32(reader, length)
		case 0x0004:
			msg.Hoehenwert, err = ReadFloat32(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultEtcsZugdaten(reader io.Reader) (*fahrpult.EtcsZugdaten, error) {
	msg := fahrpult.EtcsZugdaten{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Bremshundertstel, err = ReadUint16(reader, length)
		case 0x0002:
			msg.Zugkategorie, err = ReadUint16(reader, length)
		case 0x0003:
			msg.Zuglaenge, err = ReadUint16(reader, length)
		case 0x0004:
			msg.Hoechstgeschwindigkeit, err = ReadUint16(reader, length)
		case 0x0005:
			msg.Achslast, err = ReadUint16(reader, length)
		case 0x0006:
			msg.Zugnummer, err = ReadUint16(reader, length)
		case 0x0007:
			msg.TfNummer, err = ReadUint16(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultFahrpultMessage(reader io.Reader) (*fahrpult.FahrpultMessage, error) {
	msg := fahrpult.FahrpultMessage{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0003:
			msg.NeededData, err = readFahrpultNeededDataMessage(reader)
		case 0x0004:
			msg.AckNeededData, err = readFahrpultAckNeededData(reader)
		case 0x000A:
			msg.DataFtd, err = readFahrpultDataFtd(reader)
		case 0x000C:
			msg.DataProg, err = readFahrpultDataProg(reader)
		case 0x010B:
			msg.Control, err = readFahrpultControl(reader)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultFuehrerstandsanzeigen(reader io.Reader) (*fahrpult.Fuehrerstandsanzeigen, error) {
	msg := fahrpult.Fuehrerstandsanzeigen{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			v, er := ReadUint16(reader, length)
			msg.Anzeigen = append(msg.Anzeigen, *v)
			err = er
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultFuehrerstandsbedienung(reader io.Reader) (*fahrpult.Fuehrerstandsbedienung, error) {
	msg := fahrpult.Fuehrerstandsbedienung{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultIndusiEinstellungen(reader io.Reader) (*fahrpult.IndusiEinstellungen, error) {
	msg := fahrpult.IndusiEinstellungen{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Zugart, err = ReadUint8(reader, length)
		case 0x0002:
			msg.TfNummer, err = ReadString(reader, length)
		case 0x0003:
			msg.Zugnummer, err = ReadString(reader, length)
		case 0x0004:
			msg.Grunddaten, err = readFahrpultZugdaten(reader)
		case 0x0005:
			msg.Ersatzzugdaten, err = readFahrpultZugdaten(reader)
		case 0x0006:
			msg.AktiveZugdaten, err = readFahrpultZugdaten(reader)
		case 0x0007:
			msg.Hauptschalter, err = ReadUint8(reader, length)
		case 0x0008:
			msg.PzbStoerschalter, err = ReadUint8(reader, length)
		case 0x0009:
			msg.LzbStoerschalter, err = ReadUint8(reader, length)
		case 0x000A:
			msg.Luftabsperrhahn, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultIndusiZustand(reader io.Reader) (*fahrpult.IndusiZustand, error) {
	msg := fahrpult.IndusiZustand{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0002:
			msg.Zugsicherung, err = ReadUint16(reader, length)
		case 0x0003:
			msg.Zwangsbremsungsgrund, err = ReadUint16(reader, length)
		case 0x0004:
			msg.ZwangsbremsungsgrundString, err = ReadString(reader, length)
		case 0x0005:
			msg.Lm1000Hz, err = ReadUint8(reader, length)
		case 0x0006:
			msg.LmU, err = ReadUint8(reader, length)
		case 0x0007:
			msg.LmM, err = ReadUint8(reader, length)
		case 0x0008:
			msg.LmO, err = ReadUint8(reader, length)
		case 0x0009:
			msg.IndusiHupe, err = ReadUint8(reader, length)
		case 0x000A:
			msg.Lm500Hz, err = ReadUint8(reader, length)
		case 0x000B:
			msg.LmBefehl, err = ReadUint8(reader, length)
		case 0x000C:
			msg.ZusatzinfoMelderbild, err = ReadUint8(reader, length)
		case 0x000D:
			msg.Lzb, err = ReadUint16(reader, length)
		case 0x000E:
			msg.LzbEndeVerfahren, err = readFahrpultLzbAuftrag(reader)
		case 0x000F:
			msg.LzbErsatzauftrag, err = readFahrpultLzbAuftrag(reader)
		case 0x0010:
			msg.LzbFalschfahrauftrag, err = readFahrpultLzbAuftrag(reader)
		case 0x0011:
			msg.LzbVorsichtauftrag, err = readFahrpultLzbAuftrag(reader)
		case 0x0012:
			msg.LzbFahrtUeberHaltBefehl, err = readFahrpultLzbAuftrag(reader)
		case 0x0013:
			msg.LzbUebertragungsausfall, err = readFahrpultLzbUebertragungsausfall(reader)
		case 0x0014:
			msg.LzbNothalt, err = readFahrpultLzbNothalt(reader)
		case 0x0015:
			msg.LzbRechnerausfall, err = readFahrpultLzbRechnerausfall(reader)
		case 0x0016:
			msg.LzbElAuftrag, err = readFahrpultLzbElAuftrag(reader)
		case 0x0017:
			msg.LmH, err = ReadUint8(reader, length)
		case 0x0018:
			msg.LmE40, err = ReadUint8(reader, length)
		case 0x0019:
			msg.LmEnde, err = ReadUint8(reader, length)
		case 0x001A:
			msg.LmB, err = ReadUint8(reader, length)
		case 0x001B:
			msg.LmUe, err = ReadUint8(reader, length)
		case 0x001C:
			msg.LmG, err = ReadUint8(reader, length)
		case 0x001D:
			msg.LmEL, err = ReadUint8(reader, length)
		case 0x001E:
			msg.LmV40, err = ReadUint8(reader, length)
		case 0x001F:
			msg.LmS, err = ReadUint8(reader, length)
		case 0x0020:
			msg.LmPruefStoer, err = ReadUint8(reader, length)
		case 0x0021:
			msg.Sollgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x0022:
			msg.Zielgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x0023:
			msg.Zielweg, err = ReadFloat32(reader, length)
		case 0x0024:
			msg.LmGBl, err = ReadUint8(reader, length)
		case 0x0025:
			msg.LmPruefStoerBl, err = ReadUint8(reader, length)
		case 0x0026:
			msg.CirElkeModus, err = ReadUint8(reader, length)
		case 0x0027:
			msg.Anzeigemodus, err = ReadUint8(reader, length)
		case 0x0028:
			msg.LzbFunktionspruefung, err = readFahrpultLzbFunktionspruefung(reader)
		case 0x0029:
			msg.LmZugartLinks, err = ReadUint8(reader, length)
		case 0x002A:
			msg.LmZugart65, err = ReadUint8(reader, length)
		case 0x002B:
			msg.LmZugartRechts, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultLzbAuftrag(reader io.Reader) (*fahrpult.LzbAuftrag, error) {
	msg := fahrpult.LzbAuftrag{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Status, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultLzbElAuftrag(reader io.Reader) (*fahrpult.LzbElAuftrag, error) {
	msg := fahrpult.LzbElAuftrag{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Status, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultLzbFunktionspruefung(reader io.Reader) (*fahrpult.LzbFunktionspruefung, error) {
	msg := fahrpult.LzbFunktionspruefung{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.AlleMelderBlinken, err = readFahrpultEmptyNode(reader)
		case 0x0002:
			msg.AnzeigeDerFuehrungsgroessen, err = readFahrpultEmptyNode(reader)
		case 0x0003:
			msg.BanUeaus, err = readFahrpultEmptyNode(reader)
		case 0x0004:
			msg.ZwangsbremsungAktiv, err = readFahrpultEmptyNode(reader)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultLzbNothalt(reader io.Reader) (*fahrpult.LzbNothalt, error) {
	msg := fahrpult.LzbNothalt{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Status, err = ReadUint8(reader, length)
		case 0x0002:
			msg.WirdGesendet, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultLzbRechnerausfall(reader io.Reader) (*fahrpult.LzbRechnerausfall, error) {
	msg := fahrpult.LzbRechnerausfall{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Status, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultLzbUebertragungsausfall(reader io.Reader) (*fahrpult.LzbUebertragungsausfall, error) {
	msg := fahrpult.LzbUebertragungsausfall{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Zielgeschwindigkeit, err = ReadFloat32(reader, length)
		case 0x0002:
			msg.Status, err = ReadUint16(reader, length)
		case 0x0003:
			msg.Zielweg, err = ReadFloat32(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultNeededDataMessage(reader io.Reader) (*fahrpult.NeededDataMessage, error) {
	msg := fahrpult.NeededDataMessage{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x000A:
			msg.Fuehrerstandsanzeigen, err = readFahrpultFuehrerstandsanzeigen(reader)
		case 0x000B:
			msg.Fuehrerstandsbedienung, err = readFahrpultFuehrerstandsbedienung(reader)
		case 0x000C:
			msg.Programmdaten, err = readFahrpultProgrammdaten(reader)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultProgrammdaten(reader io.Reader) (*fahrpult.Programmdaten, error) {
	msg := fahrpult.Programmdaten{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			v, er := ReadUint16(reader, length)
			msg.Anzeigen = append(msg.Anzeigen, *v)
			err = er
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultShortNode(reader io.Reader) (*fahrpult.ShortNode, error) {
	msg := fahrpult.ShortNode{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Control, err = ReadInt16(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultSingleNode(reader io.Reader) (*fahrpult.SingleNode, error) {
	msg := fahrpult.SingleNode{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Control, err = ReadFloat32(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultStatusFahrzeug(reader io.Reader) (*fahrpult.StatusFahrzeug, error) {
	msg := fahrpult.StatusFahrzeug{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.GrundNullstellungszwang, err = ReadUint16(reader, length)
		case 0x0002:
			msg.GrundTraktionssperre, err = ReadUint16(reader, length)
		case 0x0003:
			msg.StatusFahrschalter, err = ReadUint8(reader, length)
		case 0x0004:
			msg.StatusDynamischeBremse, err = ReadUint8(reader, length)
		case 0x0006:
			msg.StatusSander, err = ReadUint8(reader, length)
		case 0x0007:
			msg.StatusBremsprobe, err = ReadUint8(reader, length)
		case 0x0008:
			msg.StellungRichtungsschalter, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultStatusNotbremssystem(reader io.Reader) (*fahrpult.StatusNotbremssystem, error) {
	msg := fahrpult.StatusNotbremssystem{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Bauart, err = ReadString(reader, length)
		case 0x0002:
			msg.StatusNotbremssystem, err = ReadUint8(reader, length)
		case 0x0003:
			msg.LmSystemBereit, err = ReadUint8(reader, length)
		case 0x0004:
			msg.LmNotbremsung, err = ReadUint8(reader, length)
		case 0x0005:
			msg.TestmodusAktiv, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultStatusSifa(reader io.Reader) (*fahrpult.StatusSifa, error) {
	msg := fahrpult.StatusSifa{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Bauart, err = ReadString(reader, length)
		case 0x0002:
			msg.LmSifa, err = ReadUint8(reader, length)
		case 0x0003:
			msg.SifaHupe, err = ReadUint8(reader, length)
		case 0x0004:
			msg.SifaHauptschalter, err = ReadUint8(reader, length)
		case 0x0005:
			msg.SifaStoerschalter, err = ReadUint8(reader, length)
		case 0x0006:
			msg.SifaLuftabsperrhahn, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultStatusTuersystem(reader io.Reader) (*fahrpult.StatusTuersystem, error) {
	msg := fahrpult.StatusTuersystem{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Bauart, err = ReadString(reader, length)
		case 0x0002:
			msg.StatusLinks, err = ReadUint8(reader, length)
		case 0x0003:
			msg.StatusRechts, err = ReadUint8(reader, length)
		case 0x0004:
			msg.TraktionssperreAktiv, err = ReadUint8(reader, length)
		case 0x0005:
			msg.Seitenwahlschalter, err = ReadUint8(reader, length)
		case 0x0006:
			msg.LmLinks, err = ReadUint8(reader, length)
		case 0x0007:
			msg.LmRechts, err = ReadUint8(reader, length)
		case 0x0008:
			msg.StatusLmLinks, err = ReadUint8(reader, length)
		case 0x0009:
			msg.StatusLmRechts, err = ReadUint8(reader, length)
		case 0x000A:
			msg.LmZwangsschliessen, err = ReadUint8(reader, length)
		case 0x000B:
			msg.StatusLmZwangsschliessen, err = ReadUint8(reader, length)
		case 0x000C:
			msg.LmLinksUndRechts, err = ReadUint8(reader, length)
		case 0x000D:
			msg.StatusLmLinksUndRechts, err = ReadUint8(reader, length)
		case 0x000E:
			msg.ZentralesOeffnenLinks, err = ReadUint8(reader, length)
		case 0x000F:
			msg.ZentralesOeffnenRechts, err = ReadUint8(reader, length)
		case 0x0010:
			msg.StatusZentralesOeffnenLinks, err = ReadUint8(reader, length)
		case 0x0011:
			msg.StatusZentralesOeffnenRechts, err = ReadUint8(reader, length)
		case 0x0012:
			msg.LmGruenschleife, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultStatusWeichen(reader io.Reader) (*fahrpult.StatusWeichen, error) {
	msg := fahrpult.StatusWeichen{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			v, er := readFahrpultWeiche(reader)
			msg.Weichen = append(msg.Weichen, *v)
			err = er
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultStatusZugbeeinflussung(reader io.Reader) (*fahrpult.StatusZugbeeinflussung, error) {
	msg := fahrpult.StatusZugbeeinflussung{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Bauart, err = ReadString(reader, length)
		case 0x0002:
			msg.IndusiEinstellungen, err = readFahrpultIndusiEinstellungen(reader)
		case 0x0003:
			msg.IndusiZustand, err = readFahrpultIndusiZustand(reader)
		case 0x0004:
			msg.EtcsEinstellungen, err = readFahrpultEtcsEinstellungen(reader)
		case 0x0005:
			msg.EtcsBetriebsdaten, err = readFahrpultEtcsBetriebsdaten(reader)
		case 0x0006:
			msg.ZubEinstellungen, err = readFahrpultZubEinstellungen(reader)
		case 0x0007:
			msg.ZubBetriebsdaten, err = readFahrpultZubBetriebsdaten(reader)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultStatusZugverband(reader io.Reader) (*fahrpult.StatusZugverband, error) {
	msg := fahrpult.StatusZugverband{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			v, er := readFahrpultEinzelfahrzeug(reader)
			msg.StatusFahrzeug = append(msg.StatusFahrzeug, *v)
			err = er
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultTrain(reader io.Reader) (*fahrpult.Train, error) {
	msg := fahrpult.Train{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Zugnummer, err = ReadString(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultWeiche(reader io.Reader) (*fahrpult.Weiche, error) {
	msg := fahrpult.Weiche{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Bezeichnung, err = ReadString(reader, length)
		case 0x0002:
			msg.Bauart, err = ReadInt32(reader, length)
		case 0x0003:
			msg.Grundstellung, err = ReadInt32(reader, length)
		case 0x0004:
			msg.Lage, err = ReadUint8(reader, length)
		case 0x0005:
			msg.Fahrtrichtung, err = ReadUint8(reader, length)
		case 0x0006:
			msg.UmlaufmodusStumpfbefahrung, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultZubBetriebsdaten(reader io.Reader) (*fahrpult.ZubBetriebsdaten, error) {
	msg := fahrpult.ZubBetriebsdaten{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.LmGnt, err = ReadUint8(reader, length)
		case 0x0002:
			msg.LmGntUe, err = ReadUint8(reader, length)
		case 0x0003:
			msg.LmGntG, err = ReadUint8(reader, length)
		case 0x0004:
			msg.LmGntS, err = ReadUint8(reader, length)
		case 0x0005:
			msg.LmGntGst, err = ReadUint8(reader, length)
		case 0x0006:
			msg.LmGntStoer, err = ReadUint8(reader, length)
		case 0x0007:
			msg.StatusLmGntUe, err = ReadUint8(reader, length)
		case 0x0008:
			msg.StatusLmGntG, err = ReadUint8(reader, length)
		case 0x0009:
			msg.StatusLmGntS, err = ReadUint8(reader, length)
		case 0x000A:
			msg.Zwangsbremsung, err = ReadUint16(reader, length)
		case 0x000B:
			msg.BetriebsbremsungAktiv, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultZubEinstellungen(reader io.Reader) (*fahrpult.ZubEinstellungen, error) {
	msg := fahrpult.ZubEinstellungen{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.BrhWert, err = ReadUint16(reader, length)
		case 0x0003:
			msg.Zuglaenge, err = ReadUint16(reader, length)
		case 0x0004:
			msg.Vmax, err = ReadUint16(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

func readFahrpultZugdaten(reader io.Reader) (*fahrpult.Zugdaten, error) {
	msg := fahrpult.Zugdaten{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

		length = length - 2

		switch attribute {
		case 0x0001:
			msg.Bremshundertstel, err = ReadUint16(reader, length)
		case 0x0002:
			msg.Bremsart, err = ReadUint16(reader, length)
		case 0x0003:
			msg.Zuglaenge, err = ReadUint16(reader, length)
		case 0x0004:
			msg.Vmax, err = ReadUint16(reader, length)
		case 0x0005:
			msg.Zugart, err = ReadUint8(reader, length)
		case 0x0006:
			msg.Modus, err = ReadUint8(reader, length)
		case 0x000B:
			msg.Klartextmeldungen, err = ReadUint8(reader, length)
		default:
			fmt.Printf("unknown field %v with len %v", attribute, length)
			_, err = ReadString(reader, length)
		}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

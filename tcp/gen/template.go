package gen

func headerTemplate() string {
	return `// Code generated by zusi-tcpgen. DO NOT EDIT.

package tcp

import (
    "io"
    "fmt"
    "errors"
    {{- range $k, $v := .Imports}}
    "{{$k}}"{{end}}
)

`
}

func clientTemplate() string {
	return `func read{{.PkgPath | pkg | title}}{{.TypeName}}(reader io.Reader) (*{{.PkgPath | pkg }}.{{.TypeName}}, error) {
	msg := {{.PkgPath | pkg }}.{{.TypeName}}{}

	for {
		length, attribute, err := ReadHeader(reader)
		if length == 0xFFFFFFFF {
			return &msg, nil
		}
		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}

        length = length - 2

		switch attribute {
		{{- range $i, $field := .Fields}}
		case 0x{{$field.IdX}}:
		    {{- if $field.Str}}
		    {{- if $field.Slice}}
		    v, er := read{{$field.StructPkgPath | pkg | title}}{{$field.StructType}}(reader)
		    msg.{{$field.Name}} = append(msg.{{$field.Name}}, *v)
		    err = er
		    {{- else}}
		    msg.{{$field.Name}}, err = read{{$field.StructPkgPath | pkg | title}}{{$field.StructType}}(reader)
		    {{- end}}
		    {{- else if $field.Slice}}
		    v, er := Read{{$field.FieldType | title}}(reader, length)
		    msg.{{$field.Name}} = append(msg.{{$field.Name}}, *v)
		    err = er
		    {{- else}}
		    msg.{{$field.Name}}, err = Read{{$field.FieldType | title}}(reader, length)
		    {{- end}}{{end}}
		default:
		    fmt.Printf("unknown field %v with len %v", attribute, length)
		    _, err = ReadString(reader, length)
    	}

		if err != nil && errors.Is(err, io.EOF) {
			return &msg, err
		}
	}
}

`
}
